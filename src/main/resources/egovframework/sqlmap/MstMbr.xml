<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mstMbr">
	<select id="mstMbr.getMstMbrListCount" parameterType="hashMap" resultType="int">
	<![CDATA[
		SELECT /* mstMbr.getMstMbrListCount */ COUNT(MM.MBR_NO) AS CNT
		  FROM MST_MBR MM
		  LEFT JOIN SYS_USR SU ON (MM.MNG_USR_ID = SU.USR_ID)
	]]>
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="mbrNm != null and mbrNm != ''">
		   AND CAST(AES_DECRYPT(UNHEX(MM.MBR_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{mbrNm}, ' ', ''), '%')
			</if>
			<if test="telNo != null and telNo != ''">
		   AND REPLACE(CONCAT(CAST(AES_DECRYPT(UNHEX(MM.TEL_NO1), #{paswKey}) AS CHAR)
							, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO2), #{paswKey}) AS CHAR)
							, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO3), #{paswKey}) AS CHAR)), '-', '') LIKE CONCAT('%', #{telNo}, '%')
			</if>
			<if test="juminNo1 != null and juminNo1 != ''">
		   AND JUMIN_NO1 = HEX(AES_ENCRYPT(#{juminNo1}, #{paswKey}))
			</if>
			<if test="searchSiteCd != null and searchSiteCd != ''">
		   AND SU.SITE_CD = ${searchSiteCd}
			</if>
		</trim>
	</select>

	<select id="mstMbr.getMstMbrList" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
		SELECT /* mstMbr.getMstMbrList */ *
		  FROM (
				SELECT T.*, @RNUM := @RNUM + 1 AS ROWNUM
				  FROM (
						SELECT
							   MM.MBR_NO
							 , CAST(AES_DECRYPT(UNHEX(MM.MBR_NM), #{paswKey}) AS CHAR) AS MBR_NM
							 , CAST(AES_DECRYPT(UNHEX(MM.JUMIN_NO1), #{paswKey}) AS CHAR) AS JUMIN_NO1
																									, MM.GEND_CD		, SC01.CD_NM AS GEND_NM
							 , MM.AGE			, MM.FRG_CD			, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO1), #{paswKey}) AS CHAR) AS TEL_NO1
																	, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO2), #{paswKey}) AS CHAR) AS TEL_NO2
																	, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO3), #{paswKey}) AS CHAR) AS TEL_NO3
							 , MM.REG_DT		, MM.CRE_DT			, MEDIC_CARE_CD		, SC02.CD_NM AS MEDIC_CARE_NM
							 , MM.MNG_USR_ID	, SU.USR_NM AS MNG_USR_NM		, SU.SITE_CD		, SC05.CD_NM AS SITE_NM
							 , MM.STS_CD		, SC03.CD_NM AS STS_NM	
							 , FN_AGE_CD(MM.AGE,'Y') AS AGE_NM		, MM.JOB_CD			, SC04.CD_NM AS JOB_NM
							 , FN_AGE_CD(MM.AGE,'N') AS AGE_CD
						  FROM MST_MBR MM
						  LEFT JOIN SYS_CD SC01 ON (SC01.GRP_CD = 'C1100' AND MM.GEND_CD = SC01.CD_ID)
						  LEFT JOIN SYS_CD SC02 ON (SC02.GRP_CD = 'C3100' AND MM.MEDIC_CARE_CD = SC02.CD_ID)
						  LEFT JOIN SYS_CD SC03 ON (SC03.GRP_CD = 'C5500' AND MM.STS_CD = SC03.CD_ID)
						  LEFT JOIN SYS_CD SC04 ON (SC04.GRP_CD = 'C1200' AND MM.JOB_CD = SC04.CD_ID)
						  LEFT JOIN SYS_USR SU ON (MM.MNG_USR_ID = SU.USR_ID)
						  LEFT JOIN SYS_CD SC05 ON (SC05.GRP_CD = 'C3500' AND SU.SITE_CD = SC05.CD_ID)
	]]>
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="mbrNm != null and mbrNm != ''">
						   AND CAST(AES_DECRYPT(UNHEX(MM.MBR_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{mbrNm}, ' ', ''), '%')
			</if>
			<if test="telNo != null and telNo != ''">
						   AND REPLACE(CONCAT(CAST(AES_DECRYPT(UNHEX(MM.TEL_NO1), #{paswKey}) AS CHAR)
											, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO2), #{paswKey}) AS CHAR)
											, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO3), #{paswKey}) AS CHAR)), '-', '') LIKE CONCAT('%', #{telNo}, '%')
			</if>
			<if test="juminNo1 != null and juminNo1 != ''">
						   AND JUMIN_NO1 = HEX(AES_ENCRYPT(#{juminNo1}, #{paswKey}))
			</if>
			<if test="searchSiteCd != null and searchSiteCd != ''">
						   AND SU.SITE_CD = ${searchSiteCd}
			</if>
		</trim>
	<![CDATA[
						 ORDER BY MM.CRE_DT DESC
				  ) T,(SELECT @RNUM := 0) RNUM
				 ORDER BY T.CRE_DT DESC
		  ) T1
		 WHERE ROWNUM > (#{currentPageNo}-1) * #{recordCountPerPage}
		 ORDER BY T1.CRE_DT DESC
		 LIMIT #{recordCountPerPage}
	]]>
	</select>

	<select id="mstMbr.getMstMbr" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
		SELECT /* mstMbr.getMstMbr */
			   MM.MBR_NO
			 , CAST(AES_DECRYPT(UNHEX(MM.MBR_NM), #{paswKey}) AS CHAR) AS MBR_NM
															, MM.GEND_CD			, MM.AGE				, CAST(AES_DECRYPT(UNHEX(MM.JUMIN_NO1), #{paswKey}) AS CHAR) AS JUMIN_NO1
			 , MM.FRG_CD			, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO1), #{paswKey}) AS CHAR) AS TEL_NO1
									, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO2), #{paswKey}) AS CHAR) AS TEL_NO2
									, CAST(AES_DECRYPT(UNHEX(MM.TEL_NO3), #{paswKey}) AS CHAR) AS TEL_NO3	, MM.JOB_CD
			 , MM.ZIP_CD			, MM.ADDR1				, MM.ADDR2				, MM.MBR_TP_CD			, MM.DRG_USE_CD
			 , MM.MRG_CD			, MM.EDU_CD				, MM.EDU02_CD			, MM.RLGN_CD			, MM.REQ_PATH_CD
			 , MM.MEDIC_CARE_CD		, MM.DIS_ETC			, MM.REG_USR_ID			, MM.REG_DT				, MM.STP_DT
			 , CAST(AES_DECRYPT(UNHEX(MM.FMLY_NAME), #{paswKey}) AS CHAR) AS FMLY_NAME
									, MM.FMLY_RELATION_CD	, MM.FMLY_SEX_CD		, MM.FMLY_AGE			, MM.FMLY_AREA
			 , CAST(AES_DECRYPT(UNHEX(MM.FMLY_TEL_NO1), #{paswKey}) AS CHAR) AS FMLY_TEL_NO1
			 , CAST(AES_DECRYPT(UNHEX(MM.FMLY_TEL_NO2), #{paswKey}) AS CHAR) AS FMLY_TEL_NO2
			 , CAST(AES_DECRYPT(UNHEX(MM.FMLY_TEL_NO2), #{paswKey}) AS CHAR) AS FMLY_TEL_NO3
																					, MM.FMLY_EXP_CD		, MM.FMLY_TOGETHER_CD
			 , MM.FMLY_TREE			, MM.PERSONAL_INFO		, MM.FMLY_RMK			, MM.RMK				, MM.MNG_USR_ID
			 , MM.LST_UPD_ID		, MM.LST_UPD_DT			, MM.STS_CD				, MM.CRE_ID				, MM.CRE_DT
			 , MM.UPD_DT			, MM.UPD_ID				, SU.USR_NM AS UPD_NM	, FN_AGE_CD(MM.AGE,'Y') AS AGE_NM
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.GEND_CD AND GRP_CD = 'C1100') AS GEND_NM 		/* 성별 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.FMLY_SEX_CD AND GRP_CD = 'C1100') AS FMLY_GEND_NM /* 보호자 성별 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.FRG_CD AND GRP_CD = 'C1300') AS FRG_NM   		/* 내/외국인 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.MBR_TP_CD AND GRP_CD = 'C7800') AS MBR_TP_NM 	/* 회원구분  */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.DRG_USE_CD AND GRP_CD = 'C3900') AS DRG_USE_NM /* 약물사용자와의 관계 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.MEDIC_CARE_CD AND GRP_CD = 'C3100') AS MEDI_CARE_NM /* 의료보장 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.EDU_CD AND GRP_CD = 'C8000') AS EDU_NM 			/* 최종학력 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.EDU02_CD AND GRP_CD = 'C7900') AS EDU02_NM 		/* 학력결과 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.MRG_CD AND GRP_CD = 'C2800') AS MRG_NM 			/* 결혼여부 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.REQ_PATH_CD AND GRP_CD = 'C2900') AS REQ_PATHG_NM /* 상담요청경로 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.RLGN_CD AND GRP_CD = 'C3000') AS RLGN_NM			/* 종교 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.JOB_CD AND GRP_CD = 'C1200') AS JOB_NM			/* 직업 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.FMLY_RELATION_CD AND GRP_CD = 'C8100') AS FMLY_RELATION_NM	/* 보호자 관계 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.FMLY_EXP_CD AND GRP_CD = 'C8200') AS FMLY_EXP_NM	/* 지지정도 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MM.FMLY_TOGETHER_CD AND GRP_CD = 'C8300') AS FMLY_TOGETHER_NM	/* 보호자 동거여부 */
			 , DATE_FORMAT(MRH.CRE_DT,'%Y-%m-%d') AS RG_CRE_DT /* 최초등록일 */
			 , DATE_FORMAT(MRH.UPD_DT,'%Y-%m-%d') AS RG_UPD_DT /* 최종수정일 */
			 , SU2.USR_NM /* 사례관리자 */
			 , DATE_FORMAT(MRH2.CRE_DT,'%Y-%m-%d') AS RL_CRE_DT /* 퇴록일자 */
			 , SC01.CD_NM AS INST_NM /* 기관명 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MRH2.REG_RLS_CD AND GRP_CD = 'C5500') AS REG_RLS_NM	/* 구분 */
			 , (SELECT CD_NM FROM SYS_CD WHERE CD_ID = MRH2.REG_RLS_CD AND GRP_CD = 'C8600') AS TYPE_NM	/* 형태 */
			 , MRH2.DTL_CTNT	/* 상세내용 */
		  FROM MST_MBR MM
		  LEFT JOIN MST_REG_HIS MRH ON (MM.MBR_NO = MRH.MBR_NO AND MRH.REG_RLS_CD = 'RG')
		  LEFT JOIN MST_REG_HIS MRH2 ON (MM.MBR_NO = MRH2.MBR_NO AND MRH2.REG_RLS_CD = 'RL')
		  LEFT JOIN SYS_USR SU ON (MM.UPD_ID = SU.USR_ID)
		  LEFT JOIN SYS_USR SU2 ON (MM.MNG_USR_ID = SU2.USR_ID)
		  LEFT JOIN SYS_CD SC01 ON (SC01.GRP_CD = 'C3500' AND MRH.INST_CD = SC01.CD_ID)
		 WHERE MM.MBR_NO = #{mbrNo}
	]]>
	</select>

	<select id="mstMbr.getMbrNoSeq" resultType="String">
	<![CDATA[
		SELECT /* mstMbr.getMbrNoSeq */
			   CONCAT('M', DATE_FORMAT(NOW(), '%Y%m%d%H'), LPAD(IFNULL(MAX(CAST(SUBSTR(MBR_NO, 12) AS UNSIGNED)), 0) + 1, 4, '0')) AS newMbrNo
		  FROM MST_MBR
		 WHERE MBR_NO LIKE CONCAT('M', DATE_FORMAT(NOW(), '%Y%m%d%H'), '%')
	]]>
	</select>

	<insert id="mstMbr.insertMstMbr" parameterType="hashMap">
	<![CDATA[
		INSERT /* mstMbr.insertMstMbr */ INTO MST_MBR(
			   MBR_NO			, MBR_NM			, GEND_CD			, AGE				, JUMIN_NO1
			 , FRG_CD			, TEL_NO1			, TEL_NO2			, TEL_NO3			, JOB_CD
			 , ZIP_CD			, ADDR1				, ADDR2				, MBR_TP_CD			, DRG_USE_CD
			 , MRG_CD			, EDU_CD			, EDU02_CD			, RLGN_CD			, REQ_PATH_CD
			 , MEDIC_CARE_CD	, DIS_ETC			, REG_USR_ID		, REG_DT			, FMLY_NAME
			 , FMLY_RELATION_CD	, FMLY_SEX_CD		, FMLY_AGE			, FMLY_AREA			, FMLY_TEL_NO1
			 , FMLY_TEL_NO2		, FMLY_TEL_NO3		, FMLY_EXP_CD		, FMLY_TOGETHER_CD	, FMLY_TREE
			 , PERSONAL_INFO	, FMLY_RMK			, RMK				, MNG_USR_ID		, LST_UPD_ID
			 , LST_UPD_DT		, STS_CD			, CRE_ID			, CRE_DT			, UPD_ID
			 , UPD_DT
		)VALUES(
			   #{mbrNo}			, HEX(AES_ENCRYPT(#{mbrNm}, #{paswKey}))
													, #{gendCd}			, #{age}			, HEX(AES_ENCRYPT(#{juminNo1}, #{paswKey}))
			 , #{frgCd}			, HEX(AES_ENCRYPT(#{telNo1}, #{paswKey}))
								, HEX(AES_ENCRYPT(#{telNo2}, #{paswKey}))
								, HEX(AES_ENCRYPT(#{telNo3}, #{paswKey}))					, #{jobCd}
			 , #{zipCd}			, #{addr1}			, #{addr2}			, #{mbrTpCd}		, #{drgUseCd}
			 , #{mrgCd}			, #{eduCd}			, #{edu02Cd}		, #{rlgnCd}			, #{reqPathCd}
			 , #{medicCareCd}	, #{disEtc}			, #{creId}			, IFNULL(#{regDt}, DATE_FORMAT(NOW(), '%Y%m%d'))
																							, HEX(AES_ENCRYPT(#{fmlyName}, #{paswKey}))
			 , #{fmlyRelationCd}, #{fmlySexCd}		, #{fmlyAge}		, #{fmlyArea}
			 , HEX(AES_ENCRYPT(#{fmlyTelNo1}, #{paswKey}))
			 , HEX(AES_ENCRYPT(#{fmlyTelNo2}, #{paswKey}))
			 , HEX(AES_ENCRYPT(#{fmlyTelNo3}, #{paswKey}))
													, #{fmlyExpCd}		, #{fmlyTogetherCd}	, #{fmlyTree}
			 , #{personalInfo}	, #{fmlyRmk}		, #{rmk}			, IFNULL(#{mngUsrId}, #{creId})	, #{creId}
			 , NOW()			, #{stsCd}			, #{creId}			, NOW()				, #{creId}
			 , NOW()
		)
	]]>
	</insert>

	<update id="mstMbr.updateMstMbr" parameterType="hashMap">
	<![CDATA[
		UPDATE /* mstMbr.updateMstMbr */ MST_MBR
		   SET MBR_NM = HEX(AES_ENCRYPT(#{mbrNm}, #{paswKey}))				, GEND_CD = #{gendCd}
			 , AGE = #{age}													, JUMIN_NO1 = HEX(AES_ENCRYPT(#{juminNo1}, #{paswKey}))
			 , FRG_CD = #{frgCd}											, TEL_NO1 = HEX(AES_ENCRYPT(#{telNo1}, #{paswKey}))
			 , TEL_NO2 = HEX(AES_ENCRYPT(#{telNo2}, #{paswKey}))			, TEL_NO3 = HEX(AES_ENCRYPT(#{telNo3}, #{paswKey}))
			 , JOB_CD = #{jobCd}											, ZIP_CD = #{zipCd}
			 , ADDR1 = #{addr1}												, ADDR2 = #{addr2}
			 , MBR_TP_CD = #{mbrTpCd}										, DRG_USE_CD = #{drgUseCd}
			 , MRG_CD = #{mrgCd}											, REG_DT = #{regDt}
			 , EDU_CD = #{eduCd}											, EDU02_CD = #{edu02Cd}
			 , RLGN_CD = #{rlgnCd}											, REQ_PATH_CD = #{reqPathCd}
			 , MEDIC_CARE_CD = #{medicCareCd}								, DIS_ETC = #{disEtc}
			 , REG_USR_ID = #{regUsrId}										, FMLY_NAME = HEX(AES_ENCRYPT(#{fmlyName}, #{paswKey}))
			 , FMLY_RELATION_CD = #{fmlyRelationCd}							, FMLY_SEX_CD = #{fmlySexCd}
			 , FMLY_AGE = #{fmlyAge}										, FMLY_AREA = #{fmlyArea}
			 , FMLY_TEL_NO1 = HEX(AES_ENCRYPT(#{fmlyTelNo1}, #{paswKey}))	, FMLY_TEL_NO2 = HEX(AES_ENCRYPT(#{fmlyTelNo2}, #{paswKey}))
			 , FMLY_TEL_NO3 = HEX(AES_ENCRYPT(#{fmlyTelNo3}, #{paswKey}))	, FMLY_EXP_CD = #{fmlyExpCd}
			 , FMLY_TOGETHER_CD = #{fmlyTogetherCd}							, FMLY_TREE = #{fmlyTree}
			 , PERSONAL_INFO = #{personalInfo}								, FMLY_RMK = #{fmlyRmk}
			 , RMK = #{rmk}													, MNG_USR_ID = #{mngUsrId}
			 , LST_UPD_ID = #{creId}										, LST_UPD_DT = NOW()
			 , UPD_ID = #{creId}											, UPD_DT = NOW()
		 WHERE MBR_NO = #{mbrNo}
	]]>
	</update>

	<delete id="mstMbr.deleteMstMbr" parameterType="String">
	<![CDATA[
		DELETE /* mstMbr.deleteMstMbr */ FROM MST_MBR
		 WHERE MBR_NO = #{mbrNo}
	]]>
	</delete>

	<update id="mstMbr.updateMstMbrStsCd" parameterType="hashMap">
	<![CDATA[
		UPDATE /* mstMbr.updateMstMbrStsCd */ MST_MBR
		   SET STS_CD = #{stsCd}				, LST_UPD_ID = #{creId}
			 , LST_UPD_DT = NOW()				, UPD_ID = #{creId}
			 , UPD_DT = NOW()
		 WHERE MBR_NO = #{mbrNo}
	]]>
	</update>

	<update id="mstMbr.updateMbrFmly" parameterType="hashMap">
	<![CDATA[
		UPDATE /* mstMbr.updateMbrFmly */ MST_MBR
		   SET FMLY_NAME = HEX(AES_ENCRYPT(#{fmlyName}, #{paswKey}))		, FMLY_RELATION_CD = #{fmlyRelationCd}
			 , FMLY_SEX_CD = #{fmlySexCd}									, FMLY_AGE = #{fmlyAge}
			 , FMLY_AREA = #{fmlyArea}										, FMLY_TEL_NO1 = HEX(AES_ENCRYPT(#{fmlyTelNo1}, #{paswKey}))
			 , FMLY_TEL_NO2 = HEX(AES_ENCRYPT(#{fmlyTelNo2}, #{paswKey}))	, FMLY_TEL_NO3 = HEX(AES_ENCRYPT(#{fmlyTelNo3}, #{paswKey}))
			 , FMLY_EXP_CD = #{fmlyExpCd}									, FMLY_TOGETHER_CD = #{fmlyTogetherCd}
			 , FMLY_TREE = #{fmlyTree}										, PERSONAL_INFO = #{personalInfo}
			 , FMLY_RMK = #{fmlyRmk}
		 WHERE MBR_NO = #{mbrNo}
	]]>
	</update>

	<update id="mstMbr.updateMbrMngUsrId" parameterType="hashMap">
	<![CDATA[
		UPDATE /* mstMbr.updateMbrMngUsrId */ MST_MBR
		   SET MNG_USR_ID = #{creId}					, LST_UPD_ID = #{creId}
			 , LST_UPD_DT = NOW()						, UPD_ID = #{creId}
			 , UPD_DT = NOW()
		 WHERE MBR_NO = #{mbrNo}
	]]>
	</update>
</mapper>