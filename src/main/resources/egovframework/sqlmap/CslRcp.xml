<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cslRcp">
	<select id="cslRcp.getCslRcp" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
		SELECT /* cslRcp.getCslRcp */
			   CR.RCP_NO				, CR.CSL_DT				, CR.CSL_FM_TM			, CR.CSL_TO_TM			, CR.CSL_TERM_TM
			 , CR.CSL_ID				, CR.CSL_NM				, CR.CSL_SITE			, CR.IFP_GB_CD			, CR.IFP_GB_ETC
			 , CR.IFP_MBR_NO
			 , CAST(AES_DECRYPT(UNHEX(CR.IFP_NM), #{paswKey}) AS CHAR) AS IFP_NM
																, CR.IFP_GEND_CD		, CR.IFP_AGE
			 , CAST(AES_DECRYPT(UNHEX(CR.IFP_TEL_NO1), #{paswKey}) AS CHAR) AS IFP_TEL_NO1
			 , CAST(AES_DECRYPT(UNHEX(CR.IFP_TEL_NO2), #{paswKey}) AS CHAR) AS IFP_TEL_NO2
			 , CAST(AES_DECRYPT(UNHEX(CR.IFP_TEL_NO3), #{paswKey}) AS CHAR) AS IFP_TEL_NO3
			 													, CR.IFP_AREA_CD		, CR.IFP_JOB_CD			, CR.TGP_MBR_NO
			 , CAST(AES_DECRYPT(UNHEX(CR.TGP_NM), #{paswKey}) AS CHAR) AS TGP_NM
										, CR.TGP_GEND_CD		, CR.TGP_AGE
			 , CAST(AES_DECRYPT(UNHEX(CR.TGP_TEL_NO1), #{paswKey}) AS CHAR) AS TGP_TEL_NO1
			 , CAST(AES_DECRYPT(UNHEX(CR.TGP_TEL_NO2), #{paswKey}) AS CHAR) AS TGP_TEL_NO2
			 , CAST(AES_DECRYPT(UNHEX(CR.TGP_TEL_NO3), #{paswKey}) AS CHAR) AS TGP_TEL_NO3
										, CR.TGP_AREA_CD		, CR.TGP_FRG_CD			, CR.TGP_JOB_CD			, CR.IF_PATH_CD
			 , CR.PBM_KND_CD			, CR.CSL_TP_CD			, CR.CSL_HIS_CD			, CR.FST_DRUG_CD		, CR.FST_DRUG
			 , CR.MAIN_DRUG_CD			, CR.MAIN_DRUG			, CR.CSL_CTNT			, CR.CSL_RST			, CR.CSL_EMER
			 , CR.MJR_MNG_CD			, CR.AST_SCO			, CR.RSKA_TP_CD			, CR.RSKB_TP_CD			, CR.RSKC_TP_CD
			 , CR.URS_CD				, CR.RSK_SCO			, CR.CRE_ID				, CR.CRE_DT				, CR.UPD_ID
			 , CR.UPD_DT				, CR.IFP_AREA_ETC		, CR.TGP_AREA_ETC
			 , SC01.CD_NM AS IFP_GP_NM							, SC02.CD_NM AS IFP_GEND_NM
			 , SC03.CD_NM AS IFP_JOB_NM							, SC04.CD_NM AS CSL_SITE_NM
			 , SC05.CD_NM AS IFP_AREA_NM						, SC06.CD_NM AS TGP_GEND_NM
			 , SC07.CD_NM AS TGP_JOB_NM							, SC08.CD_NM AS TGP_AREA_NM
			 , SC09.CD_NM AS IF_PATH_NM							, SC10.CD_NM AS PBM_KND_NM
			 , SC11.CD_NM AS CSL_TP_NM							, SC12.CD_NM AS MJR_MNG_NM
			 , SC13.CD_NM AS FST_DRUG_NM						, SC14.CD_NM AS MAIN_DRUG_NM
			 , SC15.CD_NM AS RSKA_TP_NM							, SC16.CD_NM AS RSKB_TP_NM
			 , SC17.CD_NM AS RSKC_TP_NM							, SC18.CD_NM AS URS_NM
		  FROM CSL_RCP CR
		  LEFT JOIN SYS_CD SC01 ON (SC01.GRP_CD = 'C1000' AND SC01.CD_ID = CR.IFP_GB_CD)
		  LEFT JOIN SYS_CD SC02 ON (SC02.GRP_CD = 'C1100' AND SC02.CD_ID = CR.IFP_GEND_CD)
		  LEFT JOIN SYS_CD SC03 ON (SC03.GRP_CD = 'C1200' AND SC03.CD_ID = CR.IFP_JOB_CD)
		  LEFT JOIN SYS_CD SC04 ON (SC04.GRP_CD = 'C3500' AND SC04.CD_ID = CR.CSL_SITE)
		  LEFT JOIN SYS_CD SC05 ON (SC05.GRP_CD = 'C3400' AND SC05.CD_ID = CR.IFP_AREA_CD)
  		  LEFT JOIN SYS_CD SC06 ON (SC06.GRP_CD = 'C1100' AND SC06.CD_ID = CR.TGP_GEND_CD)
		  LEFT JOIN SYS_CD SC07 ON (SC07.GRP_CD = 'C1200' AND SC07.CD_ID = CR.TGP_JOB_CD)
		  LEFT JOIN SYS_CD SC08 ON (SC08.GRP_CD = 'C3400' AND SC08.CD_ID = CR.TGP_AREA_CD)
		  LEFT JOIN SYS_CD SC09 ON (SC09.GRP_CD = 'C1400' AND SC09.CD_ID = CR.IF_PATH_CD)
		  LEFT JOIN SYS_CD SC10 ON (SC10.GRP_CD = 'C1500' AND SC10.CD_ID = CR.PBM_KND_CD)
		  LEFT JOIN SYS_CD SC11 ON (SC11.GRP_CD = 'C1600' AND SC11.CD_ID = CR.CSL_TP_CD)
		  LEFT JOIN SYS_CD SC12 ON (SC12.GRP_CD = 'C2000' AND SC12.CD_ID = CR.MJR_MNG_CD)
		  LEFT JOIN SYS_CD SC13 ON (SC13.GRP_CD = 'C1800' AND SC13.CD_ID = CR.FST_DRUG_CD)
		  LEFT JOIN SYS_CD SC14 ON (SC14.GRP_CD = 'C1900' AND SC14.CD_ID = CR.MAIN_DRUG_CD)
		  LEFT JOIN SYS_CD SC15 ON (SC15.GRP_CD = 'C2100' AND SC15.CD_ID = CR.RSKA_TP_CD)
		  LEFT JOIN SYS_CD SC16 ON (SC16.GRP_CD = 'C2200' AND SC16.CD_ID = CR.RSKB_TP_CD)
		  LEFT JOIN SYS_CD SC17 ON (SC17.GRP_CD = 'C2300' AND SC17.CD_ID = CR.RSKC_TP_CD)
		  LEFT JOIN SYS_CD SC18 ON (SC18.GRP_CD = 'C5600' AND SC18.CD_ID = CR.URS_CD)		  
		 WHERE CR.RCP_NO = #{rcpNo}
	]]>
	</select>

	<select id="cslRcp.getCslRcpSeq" resultType="String">
	<![CDATA[
		SELECT /* cslRcp.getCslRcpSeq */
			   CONCAT('R', DATE_FORMAT(NOW(), '%Y%m%d%H'), LPAD(IFNULL(MAX(CAST(SUBSTR(RCP_NO, 12) AS UNSIGNED)), 0) + 1, 4, '0')) AS rcpSeq
		  FROM CSL_RCP
		 WHERE RCP_NO LIKE CONCAT('R', DATE_FORMAT(NOW(), '%Y%m%d%H'), '%')
	]]>
	</select>

	<insert id="cslRcp.insertCslRcp" parameterType="hashMap">
	<![CDATA[
		INSERT /* cslRcp.insertCslRcp */ INTO CSL_RCP(
			   RCP_NO					, CSL_DT						, CSL_FM_TM				, CSL_TO_TM				, CSL_TERM_TM
			 , CSL_ID					, CSL_NM						, CSL_SITE				, IFP_GB_CD				, IFP_GB_ETC
			 , IFP_MBR_NO				, IFP_NM						, IFP_GEND_CD			, IFP_AGE				, IFP_TEL_NO1
			 , IFP_TEL_NO2				, IFP_TEL_NO3					, IFP_AREA_CD			, IFP_JOB_CD			, TGP_MBR_NO
			 , TGP_NM					, TGP_GEND_CD					, TGP_AGE				, TGP_TEL_NO1			, TGP_TEL_NO2
			 , TGP_TEL_NO3				, TGP_AREA_CD					, TGP_FRG_CD			, TGP_JOB_CD			, IF_PATH_CD
			 , PBM_KND_CD				, CSL_TP_CD						, CSL_HIS_CD			, FST_DRUG_CD			, FST_DRUG
			 , MAIN_DRUG_CD				, MAIN_DRUG						, CSL_CTNT				, CSL_RST				, CSL_EMER
			 , MJR_MNG_CD				, AST_SCO						, RSKA_TP_CD			, RSKB_TP_CD			, RSKC_TP_CD
			 , URS_CD					, RSK_SCO						, CRE_ID				, CRE_DT				, UPD_ID
			 , UPD_DT					, IFP_AREA_ETC					, TGP_AREA_ETC
		)VALUES(
			   #{rcpNo}					, #{cslDt}						, #{cslFmTm}			, #{cslToTm}			, CAST(#{cslTermTm} AS UNSIGNED)
			 , #{cslId}					, #{cslNm}						, #{cslSite}			, #{ifpGbCd}			, #{ifpGbEtc}
			 , #{ifpMbrNo}
			 , HEX(AES_ENCRYPT(#{ifpNm}, #{paswKey}))					, #{ifpGendCd}			, #{ifpAge}
			 , HEX(AES_ENCRYPT(#{ifpTelNo1}, #{paswKey}))
			 , HEX(AES_ENCRYPT(#{ifpTelNo2}, #{paswKey}))
			 , HEX(AES_ENCRYPT(#{ifpTelNo3}, #{paswKey}))				, #{ifpAreaCd}			, #{ifpJobCd}			, #{tgpMbrNo}
			 , HEX(AES_ENCRYPT(#{tgpNm}, #{paswKey}))
										, #{tgpGendCd}					, #{tgpAge}
			 , HEX(AES_ENCRYPT(#{tgpTelNo1}, #{paswKey}))
			 , HEX(AES_ENCRYPT(#{tgpTelNo2}, #{paswKey}))
			 , HEX(AES_ENCRYPT(#{tgpTelNo3}, #{paswKey}))
										, #{tgpAreaCd}					, #{tgpFrgCd}			, #{tgpJobCd}			, #{ifPathCd}
			 , #{pbmKndCd}				, #{cslTpCd}					, #{cslHisCd}			, #{fstDrugCd}			, #{fstDrug}
			 , #{mainDrugCd}			, #{mainDrug}					, #{cslCtnt}			, #{cslRst}				, #{cslEmer}
			 , #{mjrMngCd}				, CAST(#{astSco} AS UNSIGNED)	, #{rskaTpCd}			, #{rskbTpCd}			, #{rskcTpCd}
			 , #{ursCd}					, CAST(#{rskSco} AS UNSIGNED)	, #{cslId}				, NOW()					, #{cslId}
			 , NOW()					, #{ifpAreaEtc}					, #{tgpAreaEtc}
		)
	]]>
	</insert>

	<select id="cslRcp.getCslRcpListCount" parameterType="hashMap" resultType="int">
	<![CDATA[
		SELECT /* cslRcp.getCslRcpListCount */ COUNT(RCP_NO) AS CNT
		  FROM CSL_RCP
		 WHERE CSL_DT BETWEEN #{schStrCslDt} AND #{schEndCslDt}
	]]>
		<if test="(schGb != null or schGb != '') and schNm != '' and schNm != null">
			<choose>
				<when test="schGb == '0'">
		   AND CSL_NM LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
				</when>
				<when test="schGb == '1'">
		   AND CAST(AES_DECRYPT(UNHEX(IFP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
				</when>
				<when test="schGb == '2'">
		   AND CAST(AES_DECRYPT(UNHEX(TGP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
				</when>
				<otherwise>
		   AND (CSL_NM LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
			OR CAST(AES_DECRYPT(UNHEX(IFP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
			OR CAST(AES_DECRYPT(UNHEX(TGP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%'))
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="cslRcp.getCslRcpList" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
		SELECT /* cslRcp.getCslRcpList */ *
		  FROM (
				SELECT T.*, @RNUM := @RNUM + 1 AS ROWNUM
				  FROM (
						SELECT RCP_NO			, CSL_DT		, CSL_FM_TM		, CSL_TO_TM			, CSL_TERM_TM
							 , CSL_NM
							 , CAST(AES_DECRYPT(UNHEX(IFP_NM), #{paswKey}) AS CHAR) AS IFP_NM
							 , CAST(AES_DECRYPT(UNHEX(TGP_NM), #{paswKey}) AS CHAR) AS TGP_NM		, CRE_DT
						  FROM CSL_RCP
						 WHERE CSL_DT BETWEEN #{schStrCslDt} AND #{schEndCslDt}
	]]>
		<if test="(schGb != null or schGb != '') and schNm != '' and schNm != null">
			<choose>
				<when test="schGb == '0'">
						   AND CSL_NM LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
				</when>
				<when test="schGb == '1'">
						   AND CAST(AES_DECRYPT(UNHEX(IFP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
				</when>
				<when test="schGb == '2'">
						   AND CAST(AES_DECRYPT(UNHEX(TGP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
				</when>
				<otherwise>
						   AND (
								CSL_NM LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
							OR CAST(AES_DECRYPT(UNHEX(IFP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
							OR CAST(AES_DECRYPT(UNHEX(TGP_NM), #{paswKey}) AS CHAR) LIKE CONCAT('%', REPLACE(#{schNm}, ' ', ''), '%')
								)
				</otherwise>
			</choose>
		</if>
	<![CDATA[
						 ORDER BY CRE_DT DESC
				  ) T,(SELECT @RNUM := 0) RNUM
				 ORDER BY T.CRE_DT DESC
		  ) T1
		 WHERE ROWNUM > (#{currentPageNo}-1) * #{recordCountPerPage}
		 ORDER BY T1.CRE_DT DESC
		 LIMIT #{recordCountPerPage}
	]]>
	</select>

	<delete id="cslRcp.deleteCslRcp" parameterType="String">
	<![CDATA[
		DELETE /* cslRcp.deleteCslRcp */
		  FROM CSL_RCP
		  WHERE RCP_NO = #{rcpNo}
	]]>
	</delete>

	<update id="cslRcp.updateCslRcp" parameterType="hashMap">
	<![CDATA[
		UPDATE /* cslRcp.updateCslRcp */ CSL_RCP
		   SET CSL_DT			= #{cslDt}										, CSL_FM_TM			= #{cslFmTm}
			 , CSL_TO_TM		= #{cslToTm}									, CSL_TERM_TM		= CAST(#{cslTermTm} AS UNSIGNED)
			 , CSL_ID			= #{cslId}										, CSL_NM			= #{cslNm}
			 , CSL_SITE			= #{cslSite}									, IFP_GB_CD			= #{ifpGbCd}
			 , IFP_GB_ETC		= #{ifpGbEtc}									, IFP_MBR_NO		= #{ifpMbrNo}
			 , IFP_NM			= HEX(AES_ENCRYPT(#{ifpNm}, #{paswKey}))		, IFP_GEND_CD		= #{ifpGendCd}
			 , IFP_AGE			= #{ifpAge}										, IFP_TEL_NO1		= HEX(AES_ENCRYPT(#{ifpTelNo1}, #{paswKey}))
			 , IFP_TEL_NO2		= HEX(AES_ENCRYPT(#{ifpTelNo2}, #{paswKey}))	, IFP_TEL_NO3		= HEX(AES_ENCRYPT(#{ifpTelNo3}, #{paswKey}))
			 , IFP_AREA_CD		= #{ifpAreaCd}									, IFP_JOB_CD		= #{ifpJobCd}
			 , TGP_MBR_NO		= #{tgpMbrNo}									, TGP_NM			= HEX(AES_ENCRYPT(#{tgpNm}, #{paswKey}))
			 , TGP_GEND_CD		= #{tgpGendCd}									, TGP_AGE			= #{tgpAge}
			 , TGP_TEL_NO1		= HEX(AES_ENCRYPT(#{tgpTelNo1}, #{paswKey}))	, TGP_TEL_NO2		= HEX(AES_ENCRYPT(#{tgpTelNo2}, #{paswKey}))
			 , TGP_TEL_NO3		= HEX(AES_ENCRYPT(#{tgpTelNo3}, #{paswKey}))	, TGP_AREA_CD		= #{tgpAreaCd}
			 , TGP_FRG_CD		= #{tgpFrgCd}									, TGP_JOB_CD		= #{tgpJobCd}
			 , IF_PATH_CD		= #{ifPathCd}									, PBM_KND_CD		= #{pbmKndCd}
			 , CSL_TP_CD		= #{cslTpCd}									, CSL_HIS_CD		= #{cslHisCd}
			 , FST_DRUG_CD		= #{fstDrugCd}									, FST_DRUG			= #{fstDrug}
			 , MAIN_DRUG_CD		= #{mainDrugCd}									, MAIN_DRUG			= #{mainDrug}
			 , CSL_CTNT			= #{cslCtnt}									, CSL_RST			= #{cslRst}
			 , CSL_EMER			= #{cslEmer}									, MJR_MNG_CD		= #{mjrMngCd}
			 , AST_SCO			= CAST(#{astSco} AS UNSIGNED)					, RSKA_TP_CD		= #{rskaTpCd}
			 , RSKB_TP_CD		= #{rskbTpCd}									, RSKC_TP_CD		= #{rskcTpCd}
			 , URS_CD			= #{ursCd}										, RSK_SCO			= CAST(#{rskSco} AS UNSIGNED)
			 , UPD_ID			= #{cslId}										, UPD_DT			= NOW()
			 , IFP_AREA_ETC		= #{ifpAreaEtc}									, TGP_AREA_ETC		= #{tgpAreaEtc}
		 WHERE RCP_NO = #{rcpNo}
	]]>
	</update>
</mapper>